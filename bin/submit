#!/usr/bin/env python

from sys import exit, argv
from os import path,getenv,system
import PandaCore.Tools.job_management as jm
from PandaCore.Tools.script import * 

args = parse(('--exec', {'dest':'executable'}),
             ('--njobs', {'type':int}),
             '--arglist',
             ('--args', {'nargs':'+'}),
             '--cache',
             ('--dryrun', STORE_TRUE),
             ('--loud', STORE_TRUE))
_logger = Logger('submit')
           
jm.SILENT = not(args.loud)

if not args.cache:
    args.cache = '/data/t3serv014/{0}/submit/{1}/'.format(getenv('USER'),
                                           args.executable.split('/')[-1].replace('.',''))
system('rm -rf %s/*'%(args.cache))

if path.isfile(args.executable):
    args.executable = path.abspath(args.executable)

jm.setup_schedd('T3:SL6') # these types of jobs can only run locally

job_arguments = []
if args.arglist:
    with open(args.arglist) as fargs:
        for l in fargs:
            l = l.strip()
            if len(l)==0:
                continue
            job_arguments.append(l)
elif args.args:
    job_arguments = args.args
else:
    _logger.error('Please specify arguments!')
    exit(1)

jm.issue_proxy()
if args.njobs:
    nper = max(1,int(float(len(job_arguments))/args.njobs))
else:
    nper = 1

max_njobs = -1 if args.dryrun else None

sub = jm.SimpleSubmission(cache_dir=args.cache,
                          executable=args.executable,
                          arglist=job_arguments,
                          arguments=None,
                          nper=nper)
sub.execute(max_njobs)
sub.save()
_logger.info('Placed cache in '+args.cache)
